###  1. WCZYTANIE PACZEK  ###
#install.packages("automap")
library(automap)
#install.packages("httr")
library(httr)
#install.packages("jsonlite")
library(jsonlite)
#install.packages("maptools")
library(maptools)
#install.packages("spatstat")
library(spatstat)
#install.packages("sp")
library(sp)
#install.packages("sf")
library(sf)
#install.packages("plotrix")
library(plotrix)
#install.packages("tmaptools")
library(tmaptools)
setwd("E:/git/Analiza_Zanieczyszczenia")
load(file = "10.01_21.Rdata")
load(file = "10.01/10.01_21.Rdata")
load(file = "krk_point_23km.Rdata")
dzielnice <- st_read("DzielniceKrakowa/dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
dzielniceWGS84 <- st_transform(dzielnice, crs = 4326) #Konwertujemy do WGS84 (4326)
krk_WGS84 <- st_union(dzielniceWGS84) #Zostawiamy tylko kontur miasta
krk_UTM <- st_transform(krk_WGS84, CRS("+proj=utm +zone=34 +datum=WGS84")) #Przekształcamy na UTM
### 3. WIZUALIZACJA ###
## 3.1. PRZYGOTOWANIE WIZUALIZACJI ##
krk_centrum <- c(423941.75, 5546031.89) #Współrzędne centrum mapy
coord <- as.data.frame(krk_point_UTM)
left_down <- c(min(coord$lon), min(coord$lat)) #Współrzędne lewego dolnego rogu mapy
right_up <- c(max(coord$lon), max(coord$lat)) #Współrzędne prawego górnego rogu mapy
okno = owin(xrange = c(left_down[1], right_up[1]), yrange = c(left_down[2], right_up[2]))
krk_point_ppp_id <- ppp(
x = krk_point_UTM$lon,
y = krk_point_UTM$lat,
marks=data.frame(elev = krk_point_UTM$elev, id = krk_point_UTM$id),
window = okno
)
krk_n_id <- length(krk_point_ppp_id$marks$id) #Liczba czujników
krk_id <- krk_point_ppp_id$marks$id #Id czujników
id_PM25 <- matrix(NA, krk_n_id, 24)
id_temp <- matrix(NA, krk_n_id, 24)
id_hum <- matrix(NA, krk_n_id, 24)
id_press <- matrix(NA, krk_n_id, 24)
#KONWERSJA WŁAŚCIWYCH WARTOŚCI CURRENT DLA PYŁÓW, TEMPERATURY, WILGOTNOŚCI I CIŚNIENIA
for (i in seq(1, krk_n_id)) {
for (j in 1:24) {
#ZMIENNE LOGICZNE DO WYSZUKANIA PÓL O DANEJ NAZWIE
logic_PM25 <- krk_tab[[i]]$history$values[[j]]$name == "PM25"
logic_temp <- krk_tab[[i]]$history$values[[j]]$name == "TEMPERATURE"
logic_hum <- krk_tab[[i]]$history$values[[j]]$name == "HUMIDITY"
logic_press <- krk_tab[[i]]$history$values[[j]]$name == "PRESSURE"
#Testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
if (sum(logic_PM25) == 1) id_PM25[i,j] <- krk_tab[[i]]$history$values[[j]][logic_PM25, 2]
if (sum(logic_temp == 1)) id_temp[i,j] <- krk_tab[[i]]$history$values[[j]][logic_temp, 2]
if (sum(logic_hum == 1)) id_hum[i,j] <- krk_tab[[i]]$history$values[[j]][logic_hum, 2]
if (sum(logic_press == 1)) id_press[i,j] <- krk_tab[[i]]$history$values[[j]][logic_press, 2]
}
}
krk_point_spdf <- as.SpatialPointsDataFrame.ppp(krk_point_ppp_id)
coordinates(krk_point_spdf)
krk_point_spdf$id_PM25 <- id_PM25
krk_point_spdf$id_temp <- id_temp
krk_point_spdf$id_hum <- id_hum
krk_point_spdf$id_press <- id_press
miss_PM25 <- is.na(krk_point_spdf$id_PM25)
miss_temp <- is.na(krk_point_spdf$id_temp)
miss_hum <- is.na(krk_point_spdf$id_hum)
miss_press <- is.na(krk_point_spdf$id_press)
#ZCZYTUJĘ WARTOŚCI MAKSYMALNE I MINIMALNE DLA POMIARÓW ŻEBY POTEM WYSKALOWAĆ KOLORY NA MAPIE
maks_PM25 <- max(krk_point_spdf$id_PM25, na.rm = TRUE)
maks_temp <- max(krk_point_spdf$id_temp, na.rm = TRUE)
maks_hum <- max(krk_point_spdf$id_hum, na.rm = TRUE)
maks_press <- max(krk_point_spdf$id_press, na.rm = TRUE)
min_PM25 <- min(krk_point_spdf$id_PM25, na.rm = TRUE)
min_temp <- min(krk_point_spdf$id_temp, na.rm = TRUE)
min_hum <- min(krk_point_spdf$id_hum, na.rm = TRUE)
min_press <- min(krk_point_spdf$id_press, na.rm = TRUE)
bound <- st_as_sf(krk_UTM)
size <- c(100,100)
points <- (right_up - left_down)/size
num_points <- ceiling(points)
grid <- GridTopology(left_down, size, num_points)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34 +datum=WGS84"))
spgrid <- SpatialPixels(gridpoints)
prog_bar <- txtProgressBar(min = 0, max = 4*24, style = 3)
